// <auto-generated />
using System;
using ApiService.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ApiService.Migrations
{
    [DbContext(typeof(ApplicationDataContext))]
    [Migration("20230615092647_changeIntermModel")]
    partial class changeIntermModel
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ApiService.Models.Animal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("DoctorId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("OwnerId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "DoctorId" }, "IX_Animals_DoctorId");

                    b.HasIndex(new[] { "OwnerId" }, "IX_Animals_OwnerId");

                    b.ToTable("Animals");
                });

            modelBuilder.Entity("ApiService.Models.AnimalService", b =>
                {
                    b.Property<int>("AnimalsId")
                        .HasColumnType("integer");

                    b.Property<int>("ServicesId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("AnimalsId", "ServicesId");

                    b.HasIndex(new[] { "ServicesId" }, "IX_AnimalService_ServicesId");

                    b.ToTable("AnimalService", (string)null);
                });

            modelBuilder.Entity("ApiService.Models.AnimalVaccine", b =>
                {
                    b.Property<int>("AnimalsId")
                        .HasColumnType("integer");

                    b.Property<int>("VaccinesId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("AnimalsId", "VaccinesId");

                    b.HasIndex(new[] { "VaccinesId" }, "IX_AnimalVaccine_VaccinesId");

                    b.ToTable("AnimalVaccine", (string)null);
                });

            modelBuilder.Entity("ApiService.Models.Doctor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("ApiService.Models.Owner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Owners");
                });

            modelBuilder.Entity("ApiService.Models.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("ApiService.Models.Vaccine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.ToTable("Vaccines");
                });

            modelBuilder.Entity("ApiService.Models.Animal", b =>
                {
                    b.HasOne("ApiService.Models.Doctor", "Doctor")
                        .WithMany("Animals")
                        .HasForeignKey("DoctorId");

                    b.HasOne("ApiService.Models.Owner", "Owner")
                        .WithMany("Animals")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("ApiService.Models.AnimalService", b =>
                {
                    b.HasOne("ApiService.Models.Animal", "Animals")
                        .WithMany("AnimalServices")
                        .HasForeignKey("AnimalsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiService.Models.Service", "Services")
                        .WithMany("AnimalServices")
                        .HasForeignKey("ServicesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Animals");

                    b.Navigation("Services");
                });

            modelBuilder.Entity("ApiService.Models.AnimalVaccine", b =>
                {
                    b.HasOne("ApiService.Models.Animal", "Animals")
                        .WithMany("AnimalVaccines")
                        .HasForeignKey("AnimalsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiService.Models.Vaccine", "Vaccines")
                        .WithMany("AnimalVaccines")
                        .HasForeignKey("VaccinesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Animals");

                    b.Navigation("Vaccines");
                });

            modelBuilder.Entity("ApiService.Models.Animal", b =>
                {
                    b.Navigation("AnimalServices");

                    b.Navigation("AnimalVaccines");
                });

            modelBuilder.Entity("ApiService.Models.Doctor", b =>
                {
                    b.Navigation("Animals");
                });

            modelBuilder.Entity("ApiService.Models.Owner", b =>
                {
                    b.Navigation("Animals");
                });

            modelBuilder.Entity("ApiService.Models.Service", b =>
                {
                    b.Navigation("AnimalServices");
                });

            modelBuilder.Entity("ApiService.Models.Vaccine", b =>
                {
                    b.Navigation("AnimalVaccines");
                });
#pragma warning restore 612, 618
        }
    }
}
